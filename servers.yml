Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
Resources:
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow only Load Balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  AppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: ami-003634241a8fcdec0
      SecurityGroups:
        - Ref: AppSecurityGroup
      InstanceType: t3.small
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10
    #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
#  ProfileWithRolesForOurApp:
#    Type: AWS::IAM::InstanceProfile
#    Properties:
#      Roles:
#        - UdacityS3ReadOnlyEC2
#          #!/bin/bash
#          apt-get update -y
#          apt-get install unzip awscli -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          aws s3 cp s3://udacity-demo-1/udacity.zip .
#          unzip -o udacity.zip
#Outputs:
#Bonus points for useful outputs!
